****************
* INFORMATIONS *
****************

Le Framework a été testé sur STF/STE/MSTE et non testé suffisamment sur FALCON ce qui vaudra à une nouvelle mise à jour très prochainement.

Le Framework est compatible et compilable sous Devpack 2.x & 3.x.

C'est la version 4.4 qui est en cours actuellement.

1/ Paramètres :
===============

1.1 Utilisation des overscans :
-------------------------------
Par défaut, c'est le paramètre NO_BORDER qui est utilisé.

a) Overscan Bas :
-----------------
BOTTOM_BORDER    equ 0
TOPBOTTOM_BORDER equ 1
NO_BORDER        equ 1

b) Overscan Haut & Bas :
------------------------
BOTTOM_BORDER    equ 1
TOPBOTTOM_BORDER equ 0
NO_BORDER        equ 1

c) Aucun Overscan :
-------------------
BOTTOM_BORDER    equ 1
TOPBOTTOM_BORDER equ 1
NO_BORDER        equ 0

Chaque partie BOTTOM_BORDER, TOPBOTTOM_BORDER & NO_BORDER est initialisable séparément !

1.2 Utilisation des paramètres:
-------------------------------

a) Pattern :
------------
Il permet de remplir les écrans du plan que l'on veut, par exemple :
PATTERN          equ $FFFF0000
Remplit le fond de l'écran avec la couleur numéro 6 de la palette.

Par défaut, il doit être initialisé comme ceci :
PATTERN          equ $0
Pour que les écrans soient bien éffacés sur 4 plans.

b) Nombre d'écrans :
--------------------
Le parametre NB_OF_SCREEN permet d'utiliser un ou deux écrans dans votre démo. Par défaut il utilise un ecran physique et logique ce qui évite des effets de clipping.

c) Temps Cpu :
--------------
Il permet de voir le temps pris (couleur violette) et le temps restant en noir en restant appuyé sur la touche ALTERNATE.
SEEMYVBL         equ 0

Il est conseillé de le mettre à "1" une fois le programme terminé...

d) Erreurs systèmes :
---------------------
Permet de récupérer le type d'erreur et de l'afficher via un code couleur.
ERROR_SYS        equ 0
Le programme ne rend jamais la main.

Il est conseillé de le mettre à "1" une fois le programme terminé...

Source code from Mickaël Pointier - http://www.defence-force.com

e) Fading :
-----------
Permet de passer de la couleur blanche du bureau au le noir.
FADE_INTRO       equ 1

f) Teste du STE :
-----------------
Permet de bloquer le lancement du programme sur un STF et initialise aussi la partie Falcon pour une meilleure compatibilité.
TEST_STE         equ 1

g) Top comptabilité !
---------------------
J'ai rajouté dans le Framework la retro-comptabilité pour FALCON par Arnaud Carré - http://leonard.oxg.free.fr/SainT/saint.html

2/ Principales fonctionnalités :
================================
Assembler control with options of compilating : 
- Case Sensitivity avec control des labels en Minuscule et Majuscule,
- Pas de mode Debug activaté,
- Aucune Optimsation du code à la compilation,
- N'affiche pas les messages d'Alertes,
- No Extend Debug mode activated in the final program.
Détection du mode Superviseur.
Allocation de mémoire pour l'exécution du programme.
Performances :
* Arrêt du lecteur de disquette,
* Gestion du buffer clavier,
* Gestion du multiboot pour la compatibilité entre le gamme ST/STF/MST/MSTF/STE/MSTE/TT/FALCON,
* Les overscans sont stables sur tout tout type de machine et moniteur suivant le type de musique utilisé. (Il n'y a pas de plantage mais un problème de stabilisation !),
Sécurité:
* Efface la partie BSS avant de l'initialiser,
* Sauvegarde/restauration de toutes les données systèmes,
* Gestion des écrans :
 - Création en BSS à la fin du programme,
 - Compatible STE,
 - 2 écrans : logique & physique,
 - Sizing d'écran pour le type d'overscan utilisé,
 - Remplissage automatique à la création,
* Détournement des exceptions,
* Renvoi l'état de la pile au final.

3/ Comment ajouter du code ?
============================
Pour implémenter du code dans le template :
a) Il faut sélectionner le type d'OVERSCAN utilisé, par défaut on utilisera le paramètre NO_BORDER,
b) Implémenter le code appelé dans la boucle principale, à partir de la ligne 105,
c) Ajouté vos routines à partir de la ligne 572,
d) Ajouté vos données dans la section DATA à partir de la ligne 584,
e) Ajouté vos données initialisables dans la section BSS à partir de la ligne 599.
Option Timer :
--------------
a) Rajouter une routine HBL avec la VBL : il faut ajouter l'initialisation des Timers et les appels de la HBL entre les lignes 426,
b) Vous pouvez ajouter du code dans la VBL, à partir de la ligne 253,
c) Déclarer le code de la routine HBL à partir de la ligne 276.

4/ Des exemples :
=================

4.1 example.LZ7 :
-----------------
Utilisation du compacteur LZ7 version 1.3 dans le programme et utilisation des données initialisables (partie BSS).

4.2 example.SPU :
-----------------
Affichage d'une image Spectrum 512/4096 couleurs.

4.3 example.STE :
-----------------
Utilisation du blitter (test du STE) et affichage de digits plus utilisation de l'overscan bas.

4.4 example.STF :
-----------------
Utilisation d'un Timer pour afficher des rasters avec un scrolling 8*8 1 plan.

5/ Pour finir :
===============
Et joint avec les fichiers :
- DEVPACK 2.25fr pour compiler la code ASM + MONST pour le débogage,
- NEOCHROME 2.24 pour faire le découpage d'image et utilisation de la palette,
- LZ77-13.TTP pour l'utilisation de fichier LZ7.


Voila !

Frédéric Sagez aka Zorro 2^NoExtra.

Update the 4 dec. 2016.
